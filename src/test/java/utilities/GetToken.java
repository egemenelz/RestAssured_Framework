package utilities;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;

import io.restassured.http.ContentType;
import io.restassured.module.jsv.JsonSchemaValidator;
import io.restassured.path.json.JsonPath;

import utilities.PoJos.*;

import java.io.File;
import java.util.*;

import static io.restassured.RestAssured.*;

public class GetToken {

    /**
     * Login Functions to generate a Token on every time we run
     * To use this method, will need a userType and StatusCode
     * User's generated by the userType method used map to hold the data
     * This function will return JsonPath and can extract the tokens from it
     * @param userType
     * @param statusCode
     * @return
     * @author Egemen Eliz
     */
    public static JsonPath login(String userType, int statusCode){
        /**
         * "ObjectWriter" this class required by JacksonDatabind
         * Without this class, unable to do Serialization
         */

        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();

        Details details = new Details();
        details.setUSER_NAME(userTypes(userType).get("username"));
        details.setPASSWORD(userTypes(userType).get("password"));

        DetailsPOJO detailsPOJO = new DetailsPOJO();
        detailsPOJO.setDETAILS(details);

        JsonPath jsonPath;


        try {
            jsonPath = given()
                    .header("SOURCE_REF", "1234")
                    .contentType(ContentType.JSON)
                    .body(ow.writeValueAsString(detailsPOJO)).
            when().
                    post("/event-login-auth").
            then()
                    .spec(ReqNResSpec.getRespSpec(statusCode))
                    .body(JsonSchemaValidator.
                            matchesJsonSchema(new File("src/test/java/utilities/schemas/loginSchema.json")))
                    .extract().jsonPath();
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
        return jsonPath;
    }


    public static Map<String, String> userTypes(String userType){
        Map<String,String> userCredentials = new LinkedHashMap<>();

        switch (userType) {
            case "SUPER_ADMIN":
                userCredentials.put("username",ConfigReader.readProperty("superAdmin"));
                userCredentials.put("password", ConfigReader.readProperty("superAdmin.pw"));
            break;

            case "INVESTOR":
                userCredentials.put("username",ConfigReader.readProperty("investor"));
                userCredentials.put("password", ConfigReader.readProperty("password"));
                break;

            case "INVESTOR_ADMIN":
                userCredentials.put("username",ConfigReader.readProperty("investorAdmin"));
                userCredentials.put("password", ConfigReader.readProperty("password"));
                break;

            case "ADMIN":
                userCredentials.put("username",ConfigReader.readProperty("admin"));
                userCredentials.put("password", ConfigReader.readProperty("password"));
                break;
        }
        return userCredentials;
    }




}
